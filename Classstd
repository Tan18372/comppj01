sorce_list=[]

class Student:
    def __init__(self,name,sid,sorce):
        self.name=name
        self.sid=sid
        self.sorce=sorce
        sorce_list.append(self.sorce)

    def get_name(self):
        #print(self.name)
        return self.name
    
    def get_sid(self):
        #print(self.sid)
        return self.sid
    
    def get_sorce(self):
        #print(self.sorce)
        return self.sorce

    def get_new_name(self,new_name):
        self.name=new_name
        #print(self.name)

    def get_new_sid(self,new_sid):
        self.sid=new_sid
        #print(self.sid)

    def get_new_sorce(self,new_socre):
        self.sorce=new_socre
        sorce_list.append(new_socre)
        sorce_list.pop(0)
        print(self.sorce)

class Score:
    
    def __init__(self):
        self.students = {}
        
    def add_student(self, name, sid, sorce):
        if sid in self.students:
            print("The student ID", sid, "already exists!")
        else:
            new_student = Student(name, sid, sorce)
            self.students[sid] = new_student
            print("Student registered")
    
    def update_student_score(self, sid, score):
        if sid not in self.students:
            print("Invalid student ID!", sid)
        else:
            student = self.students[sid]
            student.add_new_score(int(score)) 
            
    def udpate_student_name(self, sid, newname):
        if sid not in self.students:
            print("Invalid student ID!", sid)

if __name__=='__main__':
    class Stack(Student):
        def __init__(self):
            self.stack = []

        def size(self):
            return len(self.stack)

        def isEmpty(self):
            if self.size() == 0:
                return True
            else:
                return False

        def push(self, value):
            self.stack.append(value)
            self.stack

        def pop(self):
            if not self.isEmpty():
                pop_value = self.stack.pop()
                print("Popped value is", pop_value)
            else:
                raise IndexError("Attempt to pop an empty stack")

        def print_stack(self):
            for i in range(len(self.stack)):
                print(self.stack[i])
         
    

ST=Student('Lima',1234567,32)
print(ST.get_sorce)
print(sorce_list)   
ST.get_new_sorce(90)
print(sorce_list)


P=Score()
P.add_student('Poco',1728493,40)

S=Stack()
S.push(ST)
S.print_stack()
